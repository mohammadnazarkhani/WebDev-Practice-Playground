// <auto-generated />
using System;
using BlogWebApp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogWebApp.Api.Data.migrations
{
    [DbContext(typeof(BlogWebAppDbContext))]
    [Migration("20241102222645_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogWebApp.Api.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "This is the content of the first blog post.",
                            CreatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2246),
                            Title = "First Blog Post",
                            UpdatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2248)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "This is the content of the second blog post.",
                            CreatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2251),
                            Title = "Second Blog Post",
                            UpdatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2251)
                        });
                });

            modelBuilder.Entity("BlogWebApp.Api.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            CreatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2266),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 2,
                            CreatedAt = new DateTime(2024, 11, 2, 22, 26, 45, 419, DateTimeKind.Utc).AddTicks(2268),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("BlogWebApp.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Password = "hashed_password_here",
                            Role = 2,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "creator@example.com",
                            Password = "hashed_password_here",
                            Role = 1,
                            UserName = "creator"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@example.com",
                            Password = "hashed_password_here",
                            Role = 0,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("BlogWebApp.Api.Entities.BlogPost", b =>
                {
                    b.HasOne("BlogWebApp.Api.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BlogWebApp.Api.Entities.Comment", b =>
                {
                    b.HasOne("BlogWebApp.Api.Entities.BlogPost", "BlogPost")
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogWebApp.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
